import time
while True:
    print("\n\n______  _________ _        _______  _______  _______  _______  _______\n(  ___ \ \__   __/( (    /|(  ____ \(  ____ \(  ___  )(  ____ )(  ____ \|\     /|\n| (   ) )   ) (   |  \  ( || (    \/| (    \/| (   ) || (    )|| (    \/| )   ( |\n| (__/ /    | |   |   \ | || (_____ | (__    | (___) || (____)|| |      | (___) |\n|  __ (     | |   | (\ \) |(_____  )|  __)   |  ___  ||     __)| |      |  ___  |\n| (  \ \    | |   | | \   |      ) || (      | (   ) || (\ (   | |      | (   ) |\n| )___) )___) (___| )  \  |/\____) || (____/\| )   ( || ) \ \__| (____/\| )   ( |\n|/ \___/ \_______/|/    )_)\_______)(_______/|/     \||/   \__/(_______/|/     \|     by Levi\n\n")
    def quickso(a):
        if len(a) < 2:
            return a
        else:
            p = a[0]
            al = []
            ar = []
            for i in range(1, len(a)):
                if a[i] < p:
                    al.append(a[i])
                else:
                    ar.append(a[i])
            al = quickso(al)
            ar = quickso(ar)
            return al + [p] + ar

    import random

    count = 1000
    nums = [None] * count
    for i in range(count):
            nums[i] = random.randrange(1000)
    nums = quickso(nums)

    def binsearch(a, d):
        min = 0
        max = len(a) - 1
        while min <= max:
            zw = (min + max) // 2
            if a[zw] == d:
                print("\nDu hast die richtige Zahl " + str(d) + " aufgedeckt")
                return zw
            elif a[zw] < d:
                min = zw + 1
            else:
                max = zw - 1
            if min == max:
                print("\nDu hast die falsche Zahl " + str(zw) + " gefunden (" + str(d) + " war gesucht)")
                return zw
            if min > max:
                print("\nDie gesuchte Zahl " + str(d) + " ist nicht vorhanden")
                return zw

    d = int(input("Welche Zahl soll gesucht werden?\n"))
    binsearch(nums, d)

    print("\n")
    input("Dr√ºcke Enter um zu wiederholen...\n")
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")