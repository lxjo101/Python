import time

BLACK = '\033[30m'
RED = '\033[31m'
GREEN = '\033[32m'
YELLOW = '\033[33m'
BLUE = '\033[34m'
MAGENTA = '\033[35m'
CYAN = '\033[36m'
LIGHT_GRAY = '\033[37m'
DARK_GRAY = '\033[90m'
BRIGHT_RED = '\033[91m'
BRIGHT_GREEN = '\033[92m'
BRIGHT_YELLOW = '\033[93m'
BRIGHT_BLUE = '\033[94m'
BRIGHT_MAGENTA = '\033[95m'
BRIGHT_CYAN = '\033[96m'
WHITE = '\033[97m'

RESET = '\033[0m' 

while True:
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + BLACK + "______  _________ _        _______  _______  _______  _______  _______\n(  ___ \ \__   __/( (    /|(  ____ \(  ____ \(  ___  )(  ____ )(  ____ \|\     /|\n| (   ) )   ) (   |  \  ( || (    \/| (    \/| (   ) || (    )|| (    \/| )   ( |\n" + RED + "| (__/ /    | |   |   \ | || (_____ | (__    | (___) || (____)|| |      | (___) |\n|  __ (     | |   | (\ \) |(_____  )|  __)   |  ___  ||     __)| |      |  ___  |\n| (  \ \    | |   | | \   |      ) || (      | (   ) || (\ (   | |      | (   ) |\n" + YELLOW + "| )___) )___) (___| )  \  |/\____) || (____/\| )   ( || ) \ \__| (____/\| )   ( |\n|/ \___/ \_______/|/    )_)\_______)(_______/|/     \||/   \__/(_______/|/     \|" + RESET + "     by Levi\n\n")
    def quickso(a):
        if len(a) < 2:
            return a
        else:
            p = a[0]
            al = []
            ar = []
            for i in range(1, len(a)):
                if a[i] < p:
                    al.append(a[i])
                else:
                    ar.append(a[i]) 
            al = quickso(al)
            ar = quickso(ar)
            return al + [p] + ar

    import random

    count = 1000
    nums = [None] * count
    for i in range(count):
            nums[i] = random.randrange(1000)
    nums = quickso(nums)

    def binsearch(a, d):
        min = 0
        max = len(a) - 1
        while min <= max:
            zw = (min + max) // 2
            if a[zw] == d:
                print(BRIGHT_GREEN + "\nDu hast die richtige Zahl " + str(d) + " aufgedeckt" + RESET)
                return zw
            elif a[zw] < d:
                min = zw + 1
            else:
                max = zw - 1
            if min == max:
                print(RED + "\nDu hast die falsche Zahl " + str(zw) + " gefunden " + BLACK + "(" + str(d) + " war gesucht)" + RESET)
                return zw
            if min > max:
                print(RED + "\nDie gesuchte Zahl " + str(d) + " ist nicht vorhanden" + RESET)
                return zw
            
    auswahl = int(input(WHITE + "Fortfahren: " + WHITE + "\n1: Zahl suchen " + BLACK + "\n2: sortierten Array anzeigen" + BRIGHT_BLUE + "\n"))
    print(RESET)
    if auswahl == 1:
        d = int(input("\nWelche Zahl soll gesucht werden?\n" + BRIGHT_BLUE))
        binsearch(nums, d)
    elif auswahl == 2:
        print("\n" + str(nums) + "\n")
    else:
        print(RED + "Invalide Eingabe" + RESET)
        
    input(BLACK + "\nDr√ºcke Enter um zu fortzufahren...\n")
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")